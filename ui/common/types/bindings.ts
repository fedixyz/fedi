import { RequestInvoiceArgs } from "webln";

import { MSats } from "@fedi/common/types";

export type RpcMethodNames = keyof RpcMethods;
export type RpcPayload<M extends RpcMethodNames> = RpcMethods[M][0];
export type RpcResponse<M extends RpcMethodNames> = RpcMethods[M][1];

// used by generated code
declare const __opaque_type__: unique symbol; // https://blog.beraliv.dev/2021-05-07-opaque-type-in-typescript
export type Opaque<BaseType, TagName> = BaseType & {
  readonly [__opaque_type__]: TagName;
};

export type EcashRequest = Omit<RequestInvoiceArgs, "defaultMemo">;

export type JSONValue =
  | string
  | number
  | boolean
  | null
  | { [key: string]: JSONValue }
  | JSONValue[];

export type JSONObject = Record<string, JSONValue>;

// this was auto generated by ts-bindgen.sh

export type BalanceEvent = {
  federationId: RpcFederationId;
  balance: RpcAmount;
};

export type BridgeOffboardingReason =
  | { type: "deviceIdentifierMismatch" }
  | { type: "internalBridgeExport" };

/**
 * Notify front-end that a particular community's metadata has updated
 */
export type CommunityMetadataUpdatedEvent = { newCommunity: RpcCommunity };

export type CreateRoomRequest = JSONObject;

/**
 * Status of device registration with Fedi's server
 */
export type DeviceRegistrationEvent = { state: DeviceRegistrationState };

export type DeviceRegistrationFeatureConfig = { service_url: string };

/**
 * States representing the different outcomes for device registration requests
 * sent to Fedi's servers
 */
export type DeviceRegistrationState =
  | "newDeviceNeedsAssignment"
  | "conflict"
  | "success"
  | "overdue";

export type EncryptedSyncFeatureConfig = { server_url: string };

export type ErrorCode =
  | "initializationFailed"
  | "notInialized"
  | "badRequest"
  | "alreadyJoined"
  | "invalidInvoice"
  | "invalidMnemonic"
  | "ecashCancelFailed"
  | "panic"
  | "invalidSocialRecoveryFile"
  | { insufficientBalance: RpcAmount }
  | "matrixNotInitialized"
  | "unknownObservable"
  | { duplicateObservableID: bigint }
  | "timeout"
  | "recovery"
  | { invalidJson: string }
  | { unsupportedCommunityVersion: number }
  | "payLnInvoiceAlreadyPaid"
  | "payLnInvoiceAlreadyInProgress"
  | "noLnGatewayAvailable"
  | { moduleNotFound: string }
  | { federationPendingRejoinFromScratch: string }
  | "invalidMsEvent"
  | "recurringdMetaNotFound"
  | "unknownFederation";

export type Event =
  | { transaction: TransactionEvent }
  | { log: LogEvent }
  | { federation: RpcFederationMaybeLoading }
  | { balance: BalanceEvent }
  | { panic: PanicEvent }
  | { sPv2Deposit: SPv2DepositEvent }
  | { sPv2Withdrawal: SPv2WithdrawalEvent }
  | { sPv2Transfer: SPv2TransferEvent }
  | { stabilityPoolDeposit: StabilityPoolDepositEvent }
  | { stabilityPoolWithdrawal: StabilityPoolWithdrawalEvent }
  | { recoveryComplete: RecoveryCompleteEvent }
  | { recoveryProgress: RecoveryProgressEvent }
  | { deviceRegistration: DeviceRegistrationEvent }
  | {
      stabilityPoolUnfilledDepositSwept: StabilityPoolUnfilledDepositSweptEvent;
    }
  | { communityMetadataUpdated: CommunityMetadataUpdatedEvent }
  | { nonceReuseCheckFailed: NonceReuseCheckFailedEvent };

/**
 * We represent the catalog of all the features for a given runtime as a
 * struct. The struct has one field for each of the features, named after the
 * feature itself, and the field is of type Option<_FeatureName_FeatureConfig>.
 *
 * The idea is that when a developer starts working on a new feature, the
 * developer will add a field to this struct using the convention specified
 * above. This will force the developer to add a configuration for that feature
 * for each of the runtimes. Initially the developer might just return None for
 * each of the runtimes to make the feature always unavailable as it is still
 * being developed. But over time the developer might start enabling the
 * feature for increasingly stricter runtimes by returning an appropriate
 * Some(_FeatureName_FeatureConfig).
 *
 * PLEASE ADD DOCUMENTATION FOR EACH FEATURE/FIELD BELOW
 */
export type FeatureCatalog = {
  /**
   * "Encrypted sync" feature is the Fedi app using a remote server to store,
   * retrieve, and manipulate data that's necessary for a smooth user
   * experience. This data can be seed-level, such as matrix server URL,
   * which is to be shared across all devices using the same seed. Or it
   * could be device-level, meaning it differs across devices using the same
   * seed. Furthermore, we use e2e encryption.
   */
  encrypted_sync: EncryptedSyncFeatureConfig | null;
  override_localhost: OverrideLocalhostFeatureConfig | null;
  /**
   * Enable Nostr client for Rate federation feature.
   *
   * This allows relays to be configured using a remote feature flag service
   * in future.
   */
  nostr_client: NostrClientFeatureCatalog | null;
  /**
   * Device registration service configuration for registering devices with
   * Fedi's backend. This service helps coordinate device indices across
   * multiple devices using the same seed.
   */
  device_registration: DeviceRegistrationFeatureConfig;
  /**
   * Matrix server configuration for chat functionality.
   * This allows different matrix servers to be used based on the runtime
   * environment.
   */
  matrix: MatrixFeatureConfig;
  /**
   * Config for which invite code to use for joining the global community
   */
  global_community: GlobalCommunityFeatureConfig;
};

export type FiatFXInfo = {
  /**
   * Code of the currency that's set as display currency in the app.
   */
  fiatCode: string;
  /**
   * 1 BTC equivalent in the display currency. This value is recorded in
   * hundredths, such as cents.
   */
  btcToFiatHundredths: number;
};

export type FinalizedGroup = {
  invitation: GroupInvitation;
  proposer: RpcUserId;
  pubkeys: { [key in RpcUserId]?: RpcPublicKey };
  federationId: RpcFederationId;
};

export type FrontendMetadata = {
  initialNotes: string | null;
  recipientMatrixId: string | null;
  senderMatrixId: string | null;
};

export type GlobalCommunityFeatureConfig = { invite_code: string };

export type GroupInvitation = {
  signers: Array<RpcUserId>;
  threshold: number;
  federationInviteCode: string;
  federationName: string;
};

/**
 * Group invitation with extra state accumlated over the events.
 */
export type GroupInvitationWithKeys = {
  invitation: GroupInvitation;
  proposer: RpcUserId;
  pubkeys: { [key in RpcUserId]?: RpcPublicKey };
  rejections: Array<RpcUserId>;
  federationId: RpcFederationId;
};

export type GuardianStatus =
  | { online: { guardian: string; latency_ms: number } }
  | { error: { guardian: string; error: string } }
  | { timeout: { guardian: string; elapsed: string } };

export type LogEvent = { log: string };

export type MatrixFeatureConfig = { home_server: string };

export type MatrixInitializeStatus =
  | { type: "starting" }
  | { type: "loggingIn" }
  | { type: "success" }
  | { type: "error"; error: RpcError };

/**
 * Collected details for a given event id.
 */
export type MsEventData =
  | { withdrawalRequest: WithdrawRequestWithApprovals }
  | { groupInvitation: GroupInvitationWithKeys }
  | { depositNotification: MultispendDepositEventData }
  | "invalidEvent";

/**
 * Deposit notification saved to db.
 */
export type MultispendDepositEventData = {
  user: RpcUserId;
  fiatAmount: RpcFiatAmount;
  txid: RpcTransactionId;
  description: string;
};

/**
 * JSON formatted event that is sent in matrix room.
 */
export type MultispendEvent =
  | {
      kind: "groupInvitation";
      invitation: GroupInvitation;
      proposerPubkey: RpcPublicKey;
    }
  | {
      kind: "groupInvitationVote";
      invitation: RpcEventId;
      vote: MultispendGroupVoteType;
    }
  | { kind: "groupInvitationCancel"; invitation: RpcEventId }
  | {
      kind: "groupReannounce";
      invitationId: RpcEventId;
      invitation: GroupInvitation;
      proposer: RpcUserId;
      pubkeys: { [key in RpcUserId]?: RpcPublicKey };
      rejections: Array<RpcUserId>;
    }
  | {
      kind: "depositNotification";
      fiatAmount: RpcFiatAmount;
      txid: RpcTransactionId;
      description: string;
    }
  | {
      kind: "withdrawalRequest";
      request: { transfer_amount: RpcFiatAmount };
      description: string;
    }
  | {
      kind: "withdrawalResponse";
      request: RpcEventId;
      response: WithdrawalResponseType;
    };

/**
 * Represents the current status of a multispend group in a room
 */
export type MultispendGroupStatus =
  | {
      status: "finalized";
      invite_event_id: RpcEventId;
      finalized_group: FinalizedGroup;
    }
  | { status: "activeInvitation"; active_invite_id: RpcEventId };

export type MultispendGroupVoteType =
  | { kind: "accept"; memberPubkey: RpcPublicKey }
  | { kind: "reject" };

export type MultispendListedEvent = {
  counter: number;
  time: number;
  event: MsEventData;
  eventId: RpcEventId;
};

export type NetworkError = Record<string, never>;

/**
 * Notify front-end that given federation has failed the e-cash blind nonce
 * reuse check and must be rejoined using a recovery-from-scratch.
 */
export type NonceReuseCheckFailedEvent = { federationId: RpcFederationId };

export type NostrClientFeatureCatalog = { relays: Array<string> };

/**
 * Tracks how a user completed their onboarding process
 */
export type OnboardingMethod = "new_seed" | "restored";

export type OverrideLocalhostFeatureConfig = Record<string, never>;

export type PanicEvent = { message: string };

export type RecoveryCompleteEvent = { federationId: RpcFederationId };

/**
 * Progress of the recovery
 *
 * This includes "magic" value: if `total` is `0` the progress is "not started
 * yet"/"empty"/"none"
 *
 * total and complete are unitless.
 */
export type RecoveryProgressEvent = {
  federationId: RpcFederationId;
  /**
   * completed units of work
   */
  complete: number;
  /**
   * total units of work that are to be completed
   */
  total: number;
};

export type RpcAmount = MSats;

export type RpcAppFlavor =
  | { type: "dev" }
  | { type: "nightly" }
  | { type: "bravo" }
  | { type: "tests" };

export type RpcAudioInfo = {
  duration: number | null;
  mimetype: string | null;
  size: number | null;
};

export type RpcAudioMessageContent = {
  info: RpcAudioInfo | null;
  body: string;
  formatted: RpcFormattedBody | null;
  filename: string | null;
  source: RpcMediaSource;
};

export type RpcBackPaginationStatus =
  | "idle"
  | "paginating"
  | "timelineStartReached";

export type RpcBitcoinNetwork =
  | "bitcoin"
  | "testnet"
  | "testnet4"
  | "signet"
  | "regtest"
  | "unknown";

export type RpcBridgeStatus =
  | { type: "onboarded"; onboarding_method: OnboardingMethod | null }
  | { type: "onboarding"; stage: RpcOnboardingStage }
  | { type: "offboarding"; reason: BridgeOffboardingReason };

export type RpcCommunity = {
  inviteCode: string;
  name: string;
  meta: { [key in string]?: string };
};

export type RpcComposerDraft = {
  plainText: string;
  htmlText: string | null;
  draftType: RpcComposerDraftType;
};

export type RpcComposerDraftType =
  | "newMessage"
  | { reply: { event_id: string } }
  | { edit: { event_id: string } };

export type RpcDeviceIndexAssignmentStatus =
  | { assigned: number }
  | "unassigned";

export type RpcDuration = { nanos: number; secs: number };

export type RpcEcashInfo =
  | {
      federation_type: "joined";
      federation_id: RpcFederationId;
      amount: RpcAmount;
    }
  | {
      federation_type: "notJoined";
      federation_invite: string | null;
      amount: RpcAmount;
    };

export type RpcError = {
  error: string;
  detail: string;
  errorCode: ErrorCode | null;
};

export type RpcEventId = string;

export type RpcFederation = {
  balance: RpcAmount;
  id: RpcFederationId;
  network: RpcBitcoinNetwork | null;
  name: string;
  inviteCode: string;
  meta: { [key in string]?: string };
  recovering: boolean;
  nodes: Record<string, { url: string; name: string }>;
  clientConfig: RpcJsonClientConfig | null;
  fediFeeSchedule: RpcFediFeeSchedule;
  hadReusedEcash: boolean;
};

export type RpcFederationId = string;

export type RpcFederationMaybeLoading =
  | { init_state: "loading"; id: RpcFederationId }
  | { init_state: "failed"; error: RpcError; id: RpcFederationId }
  | ({ init_state: "ready" } & RpcFederation);

export type RpcFederationPreview = {
  id: RpcFederationId;
  name: string;
  meta: { [key in string]?: string };
  inviteCode: string;
  returningMemberStatus: RpcReturningMemberStatus;
};

export type RpcFediFeeSchedule = {
  remittanceThresholdMsat: number;
  modules: { [key in string]?: RpcModuleFediFeeSchedule };
};

export type RpcFeeDetails = {
  fediFee: RpcAmount;
  networkFee: RpcAmount;
  federationFee: RpcAmount;
};

export type RpcFiatAmount = number;

export type RpcFileInfo = {
  mimetype: string | null;
  size: number | null;
  thumbnailInfo: RpcThumbnailInfo | null;
  thumbnailSource: RpcMediaSource | null;
};

export type RpcFileMessageContent = {
  info: RpcFileInfo | null;
  body: string;
  formatted: RpcFormattedBody | null;
  filename: string | null;
  source: RpcMediaSource;
};

export type RpcFormMessageContent = {
  body: string;
  i18nKeyLabel: string | null;
  type: RpcFormType | null;
  options: Array<RpcFormOption> | null;
  value: string | null;
  formResponse: RpcFormResponse | null;
};

export type RpcFormOption = {
  value: string;
  label: string | null;
  i18nKeyLabel: string | null;
};

export type RpcFormResponse = {
  responseType: RpcFormType | null;
  responseValue: RpcFormResponseValue;
  responseBody: string | null;
  responseI18nKey: string | null;
  respondingToEventId: string | null;
};

export type RpcFormResponseValue = string | number | boolean;

export type RpcFormType = "text" | "radio" | "button";

export type RpcFormattedBody = { format: string; formattedBody: string };

export type RpcGenerateEcashResponse = {
  ecash: string;
  cancelAt: number;
  operationId: RpcOperationId;
};

export type RpcImageInfo = {
  height: number | null;
  width: number | null;
  mimetype: string | null;
  size: number | null;
  thumbnailInfo: RpcThumbnailInfo | null;
  thumbnailSource: RpcMediaSource | null;
};

export type RpcImageMessageContent = {
  info: RpcImageInfo | null;
  body: string;
  formatted: RpcFormattedBody | null;
  filename: string | null;
  source: RpcMediaSource;
};

export type RpcInitOpts = {
  dataDir: string | null;
  logLevel: string | null;
  deviceIdentifier: string;
  appFlavor: RpcAppFlavor;
};

export type RpcInvoice = {
  paymentHash: string;
  amount: RpcAmount;
  fee: RpcFeeDetails | null;
  description: string;
  invoice: string;
};

export type RpcJsonClientConfig = {
  global: unknown;
  modules: Record<string, unknown>;
};

export type RpcLightningGateway = {
  nodePubKey: RpcPublicKey;
  gatewayId: RpcPublicKey;
  api: string;
  active: boolean;
};

export type RpcLnPayState =
  | { type: "created" }
  | { type: "canceled" }
  | { type: "funded"; block_height: number }
  | { type: "waitingForRefund"; error_reason: string }
  | { type: "awaitingChange" }
  | { type: "success"; preimage: string }
  | { type: "refunded"; gateway_error: string }
  | { type: "failed" };

export type RpcLnReceiveState =
  | { type: "created" }
  | { type: "waitingForPayment"; invoice: string; timeout: string }
  | { type: "canceled"; reason: string }
  | { type: "funded" }
  | { type: "awaitingFunds" }
  | { type: "claimed" };

export type RpcLockedSeek = {
  currCycleBeginningLockedAmount: RpcAmount;
  initialAmount: RpcAmount;
  initialAmountCents: number;
  withdrawnAmount: RpcAmount;
  withdrawnAmountCents: number;
  feesPaidSoFar: RpcAmount;
  firstLockStartTime: number;
};

export type RpcMatrixAccountSession = {
  userId: string;
  deviceId: string;
  displayName: string | null;
  avatarUrl: string | null;
};

export type RpcMatrixMembership =
  | "ban"
  | "invite"
  | "join"
  | "knock"
  | "leave"
  | "unknown";

export type RpcMatrixPaymentStatus =
  | "pushed"
  | "requested"
  | "accepted"
  | "rejected"
  | "canceled"
  | "received";

export type RpcMatrixRoomState =
  | "joined"
  | "left"
  | "invited"
  | "banned"
  | "knocked";

export type RpcMatrixUploadResult = { contentUri: string };

export type RpcMatrixUserDirectorySearchResponse = {
  results: Array<RpcMatrixUserDirectorySearchUser>;
  limited: boolean;
};

export type RpcMatrixUserDirectorySearchUser = {
  userId: RpcUserId;
  displayName: string | null;
  avatarUrl: string | null;
};

export type RpcMediaContent = {
  body: string;
  formatted: RpcFormattedBody | null;
  filename: string | null;
  source: RpcMediaSource;
};

export type RpcMediaPreviewResponse = JSONObject;

export type RpcMediaSource = Opaque<unknown, "MediaSource">;

export type RpcMediaUploadParams = {
  width: number | null;
  height: number | null;
  mimeType: string;
};

export type RpcMentions = { users: Array<RpcUserId>; room: boolean };

export type RpcMethods = {
  bridgeStatus: [bridgeStatus, RpcBridgeStatus];
  onAppForeground: [onAppForeground, null];
  fedimintVersion: [fedimintVersion, string];
  getFeatureCatalog: [getFeatureCatalog, FeatureCatalog];
  joinFederation: [joinFederation, RpcFederation];
  federationPreview: [federationPreview, RpcFederationPreview];
  leaveFederation: [leaveFederation, null];
  listFederations: [listFederations, Array<RpcFederationMaybeLoading>];
  getGuardianStatus: [getGuardianStatus, Array<GuardianStatus>];
  listFederationsPendingRejoinFromScratch: [
    listFederationsPendingRejoinFromScratch,
    Array<string>,
  ];
  generateInvoice: [generateInvoice, string];
  decodeInvoice: [decodeInvoice, RpcInvoice];
  payInvoice: [payInvoice, RpcPayInvoiceResponse];
  getPrevPayInvoiceResult: [getPrevPayInvoiceResult, RpcPrevPayInvoiceResult];
  listGateways: [listGateways, Array<RpcLightningGateway>];
  switchGateway: [switchGateway, null];
  supportsSafeOnchainDeposit: [supportsSafeOnchainDeposit, boolean];
  generateAddress: [generateAddress, string];
  recheckPeginAddress: [recheckPeginAddress, null];
  previewPayAddress: [previewPayAddress, RpcFeeDetails];
  payAddress: [payAddress, RpcPayAddressResponse];
  calculateMaxGenerateEcash: [calculateMaxGenerateEcash, RpcAmount];
  generateEcash: [generateEcash, RpcGenerateEcashResponse];
  receiveEcash: [receiveEcash, [RpcAmount, RpcOperationId]];
  validateEcash: [validateEcash, RpcEcashInfo];
  cancelEcash: [cancelEcash, null];
  updateCachedFiatFXInfo: [updateCachedFiatFXInfo, null];
  listTransactions: [listTransactions, Array<RpcTransactionListEntry>];
  getTransaction: [getTransaction, RpcTransaction];
  updateTransactionNotes: [updateTransactionNotes, null];
  backupNow: [backupNow, null];
  getMnemonic: [getMnemonic, Array<string>];
  checkMnemonic: [checkMnemonic, boolean];
  restoreMnemonic: [restoreMnemonic, null];
  completeOnboardingNewSeed: [completeOnboardingNewSeed, null];
  generateReusedEcashProofs: [generateReusedEcashProofs, RpcReusedEcashProofs];
  uploadBackupFile: [uploadBackupFile, string];
  locateRecoveryFile: [locateRecoveryFile, string];
  validateRecoveryFile: [validateRecoveryFile, null];
  recoveryQr: [recoveryQr, SocialRecoveryQr | null];
  cancelSocialRecovery: [cancelSocialRecovery, null];
  socialRecoveryApprovals: [socialRecoveryApprovals, SocialRecoveryEvent];
  completeSocialRecovery: [completeSocialRecovery, null];
  socialRecoveryDownloadVerificationDoc: [
    socialRecoveryDownloadVerificationDoc,
    string | null,
  ];
  approveSocialRecoveryRequest: [approveSocialRecoveryRequest, null];
  signLnurlMessage: [signLnurlMessage, RpcSignedLnurlMessage];
  supportsRecurringdLnurl: [supportsRecurringdLnurl, boolean];
  getRecurringdLnurl: [getRecurringdLnurl, string];
  getNostrPubkey: [getNostrPubkey, RpcNostrPubkey];
  getNostrSecret: [getNostrSecret, RpcNostrSecret];
  signNostrEvent: [signNostrEvent, string];
  nostrEncrypt: [nostrEncrypt, string];
  nostrDecrypt: [nostrDecrypt, string];
  nostrEncrypt04: [nostrEncrypt04, string];
  nostrDecrypt04: [nostrDecrypt04, string];
  nostrRateFederation: [nostrRateFederation, null];
  stabilityPoolAccountInfo: [
    stabilityPoolAccountInfo,
    RpcStabilityPoolAccountInfo,
  ];
  stabilityPoolNextCycleStartTime: [stabilityPoolNextCycleStartTime, bigint];
  stabilityPoolCycleStartPrice: [stabilityPoolCycleStartPrice, bigint];
  stabilityPoolDepositToSeek: [stabilityPoolDepositToSeek, RpcOperationId];
  stabilityPoolWithdraw: [stabilityPoolWithdraw, RpcOperationId];
  stabilityPoolAverageFeeRate: [stabilityPoolAverageFeeRate, bigint];
  stabilityPoolAvailableLiquidity: [stabilityPoolAvailableLiquidity, RpcAmount];
  spv2AccountInfo: [spv2AccountInfo, RpcSPv2CachedSyncResponse];
  spv2SubscribeAccountInfo: [spv2SubscribeAccountInfo, null];
  spv2NextCycleStartTime: [spv2NextCycleStartTime, bigint];
  spv2DepositToSeek: [spv2DepositToSeek, RpcOperationId];
  spv2Withdraw: [spv2Withdraw, RpcOperationId];
  spv2WithdrawAll: [spv2WithdrawAll, RpcOperationId];
  spv2AverageFeeRate: [spv2AverageFeeRate, bigint];
  spv2AvailableLiquidity: [spv2AvailableLiquidity, RpcAmount];
  spv2OurPaymentAddress: [spv2OurPaymentAddress, string];
  spv2ParsePaymentAddress: [
    spv2ParsePaymentAddress,
    RpcSpv2ParsedPaymentAddress,
  ];
  spv2Transfer: [spv2Transfer, RpcOperationId];
  getSensitiveLog: [getSensitiveLog, boolean];
  setSensitiveLog: [setSensitiveLog, null];
  internalMarkBridgeExport: [internalMarkBridgeExport, null];
  internalExportBridgeState: [internalExportBridgeState, null];
  setMintModuleFediFeeSchedule: [setMintModuleFediFeeSchedule, null];
  setWalletModuleFediFeeSchedule: [setWalletModuleFediFeeSchedule, null];
  setLightningModuleFediFeeSchedule: [setLightningModuleFediFeeSchedule, null];
  setStabilityPoolModuleFediFeeSchedule: [
    setStabilityPoolModuleFediFeeSchedule,
    null,
  ];
  setSPv2ModuleFediFeeSchedule: [setSPv2ModuleFediFeeSchedule, null];
  getAccruedOutstandingFediFeesPerTXType: [
    getAccruedOutstandingFediFeesPerTXType,
    Array<[string, RpcTransactionDirection, RpcAmount]>,
  ];
  getAccruedPendingFediFeesPerTXType: [
    getAccruedPendingFediFeesPerTXType,
    Array<[string, RpcTransactionDirection, RpcAmount]>,
  ];
  dumpDb: [dumpDb, string];
  fetchRegisteredDevices: [fetchRegisteredDevices, Array<RpcRegisteredDevice>];
  onboardRegisterAsNewDevice: [onboardRegisterAsNewDevice, null];
  onboardTransferExistingDeviceRegistration: [
    onboardTransferExistingDeviceRegistration,
    null,
  ];
  streamCancel: [streamCancel, null];
  matrixInitializeStatus: [matrixInitializeStatus, null];
  matrixGetAccountSession: [matrixGetAccountSession, RpcMatrixAccountSession];
  matrixSubscribeSyncIndicator: [matrixSubscribeSyncIndicator, null];
  matrixSubscribeRoomList: [matrixSubscribeRoomList, null];
  matrixSubscribeRoomTimelineItems: [matrixSubscribeRoomTimelineItems, null];
  matrixRoomTimelineItemsPaginateBackwards: [
    matrixRoomTimelineItemsPaginateBackwards,
    null,
  ];
  matrixRoomSubscribeTimelineItemsPaginateBackwardsStatus: [
    matrixRoomSubscribeTimelineItemsPaginateBackwardsStatus,
    null,
  ];
  matrixSendMessage: [matrixSendMessage, null];
  matrixSendAttachment: [matrixSendAttachment, null];
  matrixRoomCreate: [matrixRoomCreate, RpcRoomId];
  matrixRoomCreateOrGetDm: [matrixRoomCreateOrGetDm, RpcRoomId];
  matrixRoomJoin: [matrixRoomJoin, null];
  matrixRoomJoinPublic: [matrixRoomJoinPublic, null];
  matrixRoomLeave: [matrixRoomLeave, null];
  matrixRoomSubscribeInfo: [matrixRoomSubscribeInfo, null];
  matrixRoomInviteUserById: [matrixRoomInviteUserById, null];
  matrixRoomSetName: [matrixRoomSetName, null];
  matrixRoomSetTopic: [matrixRoomSetTopic, null];
  matrixRoomGetMembers: [matrixRoomGetMembers, Array<RpcRoomMember>];
  matrixUserDirectorySearch: [
    matrixUserDirectorySearch,
    RpcMatrixUserDirectorySearchResponse,
  ];
  matrixSetDisplayName: [matrixSetDisplayName, null];
  matrixSetAvatarUrl: [matrixSetAvatarUrl, null];
  matrixUploadMedia: [matrixUploadMedia, RpcMatrixUploadResult];
  matrixRoomGetPowerLevels: [
    matrixRoomGetPowerLevels,
    RpcRoomPowerLevelsEventContent,
  ];
  matrixRoomSetPowerLevels: [matrixRoomSetPowerLevels, null];
  matrixRoomSendReceipt: [matrixRoomSendReceipt, boolean];
  matrixRoomSetNotificationMode: [matrixRoomSetNotificationMode, null];
  matrixRoomGetNotificationMode: [
    matrixRoomGetNotificationMode,
    RpcRoomNotificationMode | null,
  ];
  matrixSetPusher: [matrixSetPusher, null];
  matrixUserProfile: [matrixUserProfile, UserProfile];
  matrixRoomKickUser: [matrixRoomKickUser, null];
  matrixRoomBanUser: [matrixRoomBanUser, null];
  matrixRoomUnbanUser: [matrixRoomUnbanUser, null];
  matrixIgnoreUser: [matrixIgnoreUser, null];
  matrixUnignoreUser: [matrixUnignoreUser, null];
  matrixListIgnoredUsers: [matrixListIgnoredUsers, Array<RpcUserId>];
  matrixRoomPreviewContent: [matrixRoomPreviewContent, Array<RpcTimelineItem>];
  matrixPublicRoomInfo: [matrixPublicRoomInfo, RpcPublicRoomInfo];
  matrixRoomMarkAsUnread: [matrixRoomMarkAsUnread, null];
  matrixEditMessage: [matrixEditMessage, null];
  matrixDeleteMessage: [matrixDeleteMessage, null];
  matrixSendReply: [matrixSendReply, null];
  matrixDownloadFile: [matrixDownloadFile, string];
  matrixStartPoll: [matrixStartPoll, null];
  matrixEndPoll: [matrixEndPoll, null];
  matrixRespondToPoll: [matrixRespondToPoll, null];
  matrixGetMediaPreview: [matrixGetMediaPreview, RpcMediaPreviewResponse];
  matrixSaveComposerDraft: [matrixSaveComposerDraft, null];
  matrixLoadComposerDraft: [matrixLoadComposerDraft, RpcComposerDraft | null];
  matrixClearComposerDraft: [matrixClearComposerDraft, null];
  matrixSubscribeMultispendGroup: [matrixSubscribeMultispendGroup, null];
  matrixSubscribeMultispendAccountInfo: [
    matrixSubscribeMultispendAccountInfo,
    null,
  ];
  matrixMultispendListEvents: [
    matrixMultispendListEvents,
    Array<MultispendListedEvent>,
  ];
  matrixSendMultispendGroupInvitation: [
    matrixSendMultispendGroupInvitation,
    null,
  ];
  matrixApproveMultispendGroupInvitation: [
    matrixApproveMultispendGroupInvitation,
    null,
  ];
  matrixRejectMultispendGroupInvitation: [
    matrixRejectMultispendGroupInvitation,
    null,
  ];
  matrixCancelMultispendGroupInvitation: [
    matrixCancelMultispendGroupInvitation,
    null,
  ];
  matrixMultispendEventData: [matrixMultispendEventData, MsEventData | null];
  matrixSubscribeMultispendEventData: [
    matrixSubscribeMultispendEventData,
    null,
  ];
  matrixSendMultispendWithdrawalRequest: [
    matrixSendMultispendWithdrawalRequest,
    null,
  ];
  matrixSendMultispendWithdrawalApprove: [
    matrixSendMultispendWithdrawalApprove,
    null,
  ];
  matrixSendMultispendWithdrawalReject: [
    matrixSendMultispendWithdrawalReject,
    null,
  ];
  matrixMultispendDeposit: [matrixMultispendDeposit, null];
  communityPreview: [communityPreview, RpcCommunity];
  joinCommunity: [joinCommunity, RpcCommunity];
  leaveCommunity: [leaveCommunity, null];
  listCommunities: [listCommunities, Array<RpcCommunity>];
  evilSpamInvoices: [evilSpamInvoices, null];
  evilSpamAddress: [evilSpamAddress, null];
};

export type RpcModuleFediFeeSchedule = { sendPpm: number; receivePpm: number };

export type RpcMsgLikeKind =
  | ({ msgtype: "m.text" } & RpcTextLikeContent)
  | ({ msgtype: "m.notice" } & RpcTextLikeContent)
  | ({ msgtype: "m.emote" } & RpcTextLikeContent)
  | ({ msgtype: "m.file" } & RpcFileMessageContent)
  | ({ msgtype: "m.image" } & RpcImageMessageContent)
  | ({ msgtype: "m.video" } & RpcVideoMessageContent)
  | ({ msgtype: "m.audio" } & RpcAudioMessageContent)
  | ({ msgtype: "m.poll" } & RpcPollResult)
  | ({ msgtype: "xyz.fedi.federationInvite" } & RpcTextLikeContent)
  | ({ msgtype: "xyz.fedi.payment" } & RpcPaymentMessageContent)
  | ({ msgtype: "xyz.fedi.form" } & RpcFormMessageContent)
  | ({ msgtype: "xyz.fedi.multispend" } & MultispendEvent)
  | { msgtype: "failedToParseCustom"; msg_type: string; error: string }
  | { msgtype: "unknown" }
  | { msgtype: "redacted" }
  | { msgtype: "unableToDecrypt" };

export type RpcMultispendGroupStatus =
  | { status: "inactive" }
  | {
      status: "activeInvitation";
      active_invite_id: RpcEventId;
      state: GroupInvitationWithKeys;
    }
  | {
      status: "finalized";
      invite_event_id: RpcEventId;
      finalized_group: FinalizedGroup;
    };

export type RpcNostrPubkey = { hex: string; npub: string };

export type RpcNostrSecret = { hex: string; nsec: string };

export type RpcOOBReissueState =
  | { type: "created" }
  | { type: "issuing" }
  | { type: "done" }
  | { type: "failed"; error: string };

export type RpcOOBSpendState =
  | { type: "created" }
  | { type: "userCanceledProcessing" }
  | { type: "userCanceledSuccess" }
  | { type: "userCanceledFailure" }
  | { type: "refunded" }
  | { type: "success" };

export type RpcOOBState = RpcOOBSpendState | RpcOOBReissueState;

export type RpcOnboardingStage =
  | { type: "init" }
  | { type: "socialRecovery" }
  | { type: "deviceIndexSelection" };

export type RpcOnchainDepositState =
  | { type: "waitingForTransaction" }
  | ({ type: "waitingForConfirmation" } & RpcOnchainDepositTransactionData)
  | ({ type: "confirmed" } & RpcOnchainDepositTransactionData)
  | ({ type: "claimed" } & RpcOnchainDepositTransactionData)
  | { type: "failed" };

export type RpcOnchainDepositTransactionData = { txid: string };

export type RpcOnchainWithdrawState =
  | { type: "created" }
  | { type: "succeeded" }
  | { type: "failed" };

export type RpcOperationFediFeeStatus =
  | { type: "pendingSend"; fedi_fee: RpcAmount }
  | { type: "pendingReceive"; fedi_fee_ppm: number }
  | { type: "success"; fedi_fee: RpcAmount }
  | { type: "failedSend"; fedi_fee: RpcAmount }
  | { type: "failedReceive"; fedi_fee_ppm: number };

export type RpcOperationId = string;

export type RpcPayAddressResponse = { txid: string };

export type RpcPayInvoiceResponse = { preimage: string };

export type RpcPaymentMessageContent = {
  body: string;
  status: RpcMatrixPaymentStatus;
  paymentId: string;
  recipientId?: string;
  senderOperationId?: string;
  receiverOperationId?: string;
  amount: number;
  senderId?: string;
  ecash?: string;
  federationId?: string;
  bolt11?: string;
  inviteCode?: string;
};

export type RpcPeerId = number;

export type RpcPollKind = "undisclosed" | "disclosed";

export type RpcPollResponseData = {
  sender: RpcUserId;
  timestamp: number;
  answers: Array<string>;
};

export type RpcPollResult = {
  body: string;
  kind: RpcPollKind;
  maxSelections: number;
  answers: Array<RpcPollResultAnswer>;
  votes: { [key in string]?: Array<string> };
  endTime: number | null;
  hasBeenEdited: boolean;
  msgtype: string;
};

export type RpcPollResultAnswer = { id: string; text: string };

export type RpcPrevPayInvoiceResult = { completed: boolean };

export type RpcPublicKey = string;

export type RpcPublicRoomInfo = {
  id: string;
  name: string | null;
  avatarUrl: string | null;
  joinedMemberCount: number;
};

export type RpcPusher = JSONObject;

export type RpcRecoveryId = string;

export type RpcRegisteredDevice = {
  deviceIndex: number;
  deviceIdentifier: string;
  lastRegistrationTimestamp: number;
};

export type RpcReturningMemberStatus =
  | { type: "unknown" }
  | { type: "newMember" }
  | { type: "returningMember" };

export type RpcReusedEcashProofs = JSONObject;

export type RpcRoomId = string;

export type RpcRoomMember = {
  userId: RpcUserId;
  displayName: string | null;
  avatarUrl: string | null;
  ignored: boolean;
  powerLevel: number;
  membership: RpcMatrixMembership;
};

/**
 * Enum representing the push notification modes for a room.
 */
export type RpcRoomNotificationMode =
  | "allMessages"
  | "mentionsAndKeywordsOnly"
  | "mute";

export type RpcRoomPowerLevelsEventContent = JSONObject;

export type RpcSPDepositState =
  | { type: "pendingDeposit" }
  | {
      type: "completeDeposit";
      initial_amount_cents: number;
      fees_paid_so_far: RpcAmount;
    }
  | { type: "dataNotInCache" };

export type RpcSPV2DepositState =
  | { type: "pendingDeposit"; amount: RpcAmount; fiat_amount: number }
  | {
      type: "completedDeposit";
      amount: RpcAmount;
      fiat_amount: number;
      fees_paid_so_far: RpcAmount;
    }
  | { type: "failedDeposit"; error: string }
  | { type: "dataNotInCache" };

export type RpcSPV2TransferInState =
  | {
      type: "completedTransfer";
      from_account_id: string;
      amount: RpcAmount;
      fiat_amount: number;
    }
  | { type: "dataNotInCache" };

export type RpcSPV2TransferOutState =
  | {
      type: "completedTransfer";
      to_account_id: string;
      amount: RpcAmount;
      fiat_amount: number;
    }
  | { type: "dataNotInCache" };

export type RpcSPV2WithdrawalState =
  | { type: "pendingWithdrawal"; amount: RpcAmount; fiat_amount: number }
  | { type: "completedWithdrawal"; amount: RpcAmount; fiat_amount: number }
  | { type: "failedWithdrawal"; error: string }
  | { type: "dataNotInCache" };

export type RpcSPWithdrawState =
  | { type: "pendingWithdrawal"; estimated_withdrawal_cents: number }
  | { type: "completeWithdrawal"; estimated_withdrawal_cents: number };

export type RpcSPv2CachedSyncResponse = {
  fetchTime: number;
  currCycleIdx: number;
  currCycleStartTime: number;
  currCycleStartPrice: number;
  stagedBalance: RpcAmount;
  lockedBalance: RpcAmount;
  idleBalance: RpcAmount;
  pendingUnlockRequest: number | null;
};

export type RpcSPv2SyncResponse = {
  currCycleIdx: number;
  currCycleStartTime: number;
  currCycleStartPrice: number;
  stagedBalance: RpcAmount;
  lockedBalance: RpcAmount;
  idleBalance: RpcAmount;
  pendingUnlockRequest: number | null;
};

export type RpcSerializedRoomInfo = {
  id: string;
  name: string;
  avatarUrl: string | null;
  preview: RpcTimelineItemEvent | null;
  directUserId: string | null;
  notificationCount: number;
  isMarkedUnread: boolean;
  joinedMemberCount: number;
  isPreview: boolean;
  isPublic: boolean | null;
  roomState: RpcMatrixRoomState;
};

export type RpcSignature = string;

export type RpcSignedLnurlMessage = { signature: string; pubkey: RpcPublicKey };

export type RpcSpv2ParsedPaymentAddress = {
  /**
   * do we know about the federation
   */
  federation_id: RpcFederationId | null;
};

export type RpcStabilityPoolAccountInfo = {
  idleBalance: RpcAmount;
  stagedSeeks: Array<RpcAmount>;
  stagedCancellation: number | null;
  lockedSeeks: Array<RpcLockedSeek>;
  timestamp: number;
  isFetchedFromServer: boolean;
};

export type RpcStabilityPoolConfig = {
  kind: string;
  min_allowed_seek: RpcAmount;
  max_allowed_provide_fee_rate_ppb: number | null;
  min_allowed_cancellation_bps: number | null;
  cycle_duration: RpcDuration;
};

/**
 * RpcStreamId is a type-safe identifier for RPC streams.
 * The phantom type ensures type safety between frontend and backend.
 */
export type RpcStreamId<T> = Opaque<number, ["rpc_stream_id", T]>;

/**
 * RpcStreamUpdate contains updates for an RPC stream.
 *
 * The frontend receives these updates via the event system.
 */
export type RpcStreamUpdate<T> = {
  /**
   * Stream ID that this update belongs to
   */
  stream_id: number;
  /**
   * Sequence number to ensure correct ordering of updates
   */
  sequence: number;
  /**
   * The actual update data
   */
  data: T;
};

export type RpcSyncIndicator = "hide" | "show";

export type RpcTextLikeContent = {
  body: string;
  formatted: RpcFormattedBody | null;
};

export type RpcThumbnailInfo = {
  height: number | null;
  width: number | null;
  mimetype: string | null;
  size: number | null;
};

export type RpcTimelineDetails<T> =
  | { kind: "unavailable" }
  | { kind: "pending" }
  | ({ kind: "ready" } & T)
  | { kind: "error" };

export type RpcTimelineEventItemId = Opaque<string, "RpcTimelineEventItemId">;

/**
 * This type represents the "send state" of a local event timeline item.
 */
export type RpcTimelineEventSendState =
  | { kind: "notSentYet" }
  | {
      kind: "sendingFailed";
      /**
       * Details about how sending the event failed.
       */
      error: string;
      is_recoverable: boolean;
    }
  | {
      kind: "sent";
      /**
       * The event ID assigned by the server.
       */
      event_id: string;
    };

export type RpcTimelineItem =
  | { kind: "event"; value: RpcTimelineItemEvent }
  | { kind: "dateDivider"; value: number }
  | { kind: "readMarker" }
  | { kind: "unknown" }
  | { kind: "timelineStart" };

export type RpcTimelineItemEvent = {
  id: RpcTimelineEventItemId;
  content: RpcMsgLikeKind;
  localEcho: boolean;
  timestamp: number;
  sender: string;
  sendState: RpcTimelineEventSendState | null;
  inReply: RpcTimelineDetails<RpcTimelineItemEvent> | null;
};

export type RpcTransaction = {
  id: string;
  amount: RpcAmount;
  fediFeeStatus: RpcOperationFediFeeStatus | null;
  txnNotes: string | null;
  txDateFiatInfo: FiatFXInfo | null;
  frontendMetadata: FrontendMetadata;
  /**
   * time when this operation was settled.
   */
  outcomeTime: number | null;
} & (
  | {
      kind: "lnPay";
      ln_invoice: string;
      lightning_fees: RpcAmount;
      state: RpcLnPayState | null;
    }
  | { kind: "lnReceive"; ln_invoice: string; state: RpcLnReceiveState | null }
  | { kind: "lnRecurringdReceive"; state: RpcLnReceiveState | null }
  | {
      kind: "onchainWithdraw";
      onchain_address: string;
      onchain_txid: string;
      onchain_fees: RpcAmount;
      onchain_fee_rate: number;
      state: RpcOnchainWithdrawState | null;
    }
  | {
      kind: "onchainDeposit";
      onchain_address: string;
      state: RpcOnchainDepositState | null;
    }
  | { kind: "oobSend"; state: RpcOOBSpendState | null }
  | { kind: "oobReceive"; state: RpcOOBReissueState | null }
  | { kind: "spDeposit"; state: RpcSPDepositState }
  | { kind: "spWithdraw"; state: RpcSPWithdrawState | null }
  | { kind: "sPV2Deposit"; state: RpcSPV2DepositState }
  | { kind: "sPV2Withdrawal"; state: RpcSPV2WithdrawalState }
  | { kind: "sPV2TransferOut"; state: RpcSPV2TransferOutState }
  | { kind: "sPV2TransferIn"; state: RpcSPV2TransferInState }
);

export type RpcTransactionDirection = "receive" | "send";

export type RpcTransactionId = string;

export type RpcTransactionKind =
  | {
      kind: "lnPay";
      ln_invoice: string;
      lightning_fees: RpcAmount;
      state: RpcLnPayState | null;
    }
  | { kind: "lnReceive"; ln_invoice: string; state: RpcLnReceiveState | null }
  | { kind: "lnRecurringdReceive"; state: RpcLnReceiveState | null }
  | {
      kind: "onchainWithdraw";
      onchain_address: string;
      onchain_txid: string;
      onchain_fees: RpcAmount;
      onchain_fee_rate: number;
      state: RpcOnchainWithdrawState | null;
    }
  | {
      kind: "onchainDeposit";
      onchain_address: string;
      state: RpcOnchainDepositState | null;
    }
  | { kind: "oobSend"; state: RpcOOBSpendState | null }
  | { kind: "oobReceive"; state: RpcOOBReissueState | null }
  | { kind: "spDeposit"; state: RpcSPDepositState }
  | { kind: "spWithdraw"; state: RpcSPWithdrawState | null }
  | { kind: "sPV2Deposit"; state: RpcSPV2DepositState }
  | { kind: "sPV2Withdrawal"; state: RpcSPV2WithdrawalState }
  | { kind: "sPV2TransferOut"; state: RpcSPV2TransferOutState }
  | { kind: "sPV2TransferIn"; state: RpcSPV2TransferInState };

export type RpcTransactionListEntry = {
  createdAt: number;
  id: string;
  amount: RpcAmount;
  fediFeeStatus: RpcOperationFediFeeStatus | null;
  txnNotes: string | null;
  txDateFiatInfo: FiatFXInfo | null;
  frontendMetadata: FrontendMetadata;
  /**
   * time when this operation was settled.
   */
  outcomeTime: number | null;
} & (
  | {
      kind: "lnPay";
      ln_invoice: string;
      lightning_fees: RpcAmount;
      state: RpcLnPayState | null;
    }
  | { kind: "lnReceive"; ln_invoice: string; state: RpcLnReceiveState | null }
  | { kind: "lnRecurringdReceive"; state: RpcLnReceiveState | null }
  | {
      kind: "onchainWithdraw";
      onchain_address: string;
      onchain_txid: string;
      onchain_fees: RpcAmount;
      onchain_fee_rate: number;
      state: RpcOnchainWithdrawState | null;
    }
  | {
      kind: "onchainDeposit";
      onchain_address: string;
      state: RpcOnchainDepositState | null;
    }
  | { kind: "oobSend"; state: RpcOOBSpendState | null }
  | { kind: "oobReceive"; state: RpcOOBReissueState | null }
  | { kind: "spDeposit"; state: RpcSPDepositState }
  | { kind: "spWithdraw"; state: RpcSPWithdrawState | null }
  | { kind: "sPV2Deposit"; state: RpcSPV2DepositState }
  | { kind: "sPV2Withdrawal"; state: RpcSPV2WithdrawalState }
  | { kind: "sPV2TransferOut"; state: RpcSPV2TransferOutState }
  | { kind: "sPV2TransferIn"; state: RpcSPV2TransferInState }
);

export type RpcTransferRequestId = string;

export type RpcUserId = string;

export type RpcVecDiffStreamId<T> = RpcStreamId<Array<VectorDiff<T>>>;

export type RpcVideoInfo = {
  duration: number | null;
  height: number | null;
  width: number | null;
  mimetype: string | null;
  size: number | null;
  thumbnailInfo: RpcThumbnailInfo | null;
  thumbnailSource: RpcMediaSource | null;
};

export type RpcVideoMessageContent = {
  info: RpcVideoInfo | null;
  body: string;
  formatted: RpcFormattedBody | null;
  filename: string | null;
  source: RpcMediaSource;
};

export type SPv2DepositEvent = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
  state: SPv2DepositState;
};

export type SPv2DepositState =
  | "initiated"
  | "txAccepted"
  | { txRejected: string }
  | { primaryOutputError: string }
  | "success";

export type SPv2TransferEvent = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
  state: SPv2TransferState;
};

export type SPv2TransferState =
  | "initiated"
  | "success"
  | { txRejected: string };

export type SPv2WithdrawalEvent = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
  state: SPv2WithdrawalState;
};

export type SPv2WithdrawalState =
  | "initiated"
  | "unlockTxAccepted"
  | { unlockTxRejected: string }
  | { unlockProcessingError: string }
  | { withdrawalInitiated: RpcAmount }
  | { withdrawalTxAccepted: RpcAmount }
  | { withdrawalTxRejected: string }
  | { primaryOutputError: string }
  | { success: RpcAmount };

export type SendMessageData = {
  msgtype: string;
  body: string;
  data: JSONObject;
  mentions: RpcMentions | null;
};

export type SocialRecoveryApproval = {
  guardianName: string;
  approved: boolean;
};

export type SocialRecoveryEvent = {
  approvals: Array<SocialRecoveryApproval>;
  remaining: number;
};

export type SocialRecoveryQr = { recoveryId: RpcRecoveryId };

export type StabilityPoolDepositEvent = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
  state: StabilityPoolDepositState;
};

export type StabilityPoolDepositState =
  | "initiated"
  | "txAccepted"
  | { txRejected: string }
  | { primaryOutputError: string }
  | "success";

/**
 * Notifier for partial/whole unfilled stability pool deposit having been
 * claimed back as e-cash.
 */
export type StabilityPoolUnfilledDepositSweptEvent = { amount: RpcAmount };

export type StabilityPoolWithdrawalEvent = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
  state: StabilityPoolWithdrawalState;
};

export type StabilityPoolWithdrawalState =
  | "invalidOperationType"
  | "withdrawUnlockedInitiated"
  | { txRejected: string }
  | "withdrawUnlockedAccepted"
  | { primaryOutputError: string }
  | "success"
  | { cancellationSubmissionFailure: string }
  | "cancellationInitiated"
  | "cancellationAccepted"
  | { awaitCycleTurnoverError: string }
  | { withdrawIdleSubmissionFailure: string }
  | "withdrawIdleInitiated"
  | "withdrawIdleAccepted";

export type TransactionEvent = {
  federationId: RpcFederationId;
  transaction: RpcTransaction;
};

export type UserProfile = JSONObject;

export type VectorDiff<T> =
  | {
      Append: {
        /**
         * The appended elements.
         */
        values: T[];
      };
    }
  | { Clear: Record<string, never> }
  | {
      PushFront: {
        /**
         * The new element.
         */
        value: T;
      };
    }
  | {
      PushBack: {
        /**
         * The new element.
         */
        value: T;
      };
    }
  | { PopFront: Record<string, never> }
  | { PopBack: Record<string, never> }
  | {
      Insert: {
        /**
         * The index of the new element.
         *
         * The element that was previously at that index as well as all the
         * ones after it were shifted to the right.
         */
        index: number;
        /**
         * The new element.
         */
        value: T;
      };
    }
  | {
      Set: {
        /**
         * The index of the element that was replaced.
         */
        index: number;
        /**
         * The new element.
         */
        value: T;
      };
    }
  | {
      Remove: {
        /**
         * The index that the removed element had.
         */
        index: number;
      };
    }
  | {
      Truncate: {
        /**
         * The number of elements that remain.
         */
        length: number;
      };
    }
  | {
      Reset: {
        /**
         * The full list of elements.
         */
        values: T[];
      };
    };

/**
 * Withdrawal request with extra data accumulated over events.
 */
export type WithdrawRequestWithApprovals = {
  request: { transfer_amount: RpcFiatAmount };
  description: string;
  signatures: { [key in RpcUserId]?: RpcSignature };
  rejections: Array<RpcUserId>;
  txSubmissionStatus: WithdrawTxSubmissionStatus;
  sender: RpcUserId;
};

export type WithdrawTxSubmissionStatus =
  | "unknown"
  | { accepted: { txid: RpcTransactionId } }
  | { rejected: { error: string } };

export type WithdrawalResponseType =
  | { kind: "approve"; signature: RpcSignature }
  | { kind: "reject" }
  | { kind: "complete"; fiatAmount: RpcFiatAmount; txid: RpcTransactionId }
  | { kind: "txRejected"; error: string };

export type approveSocialRecoveryRequest = {
  federationId: RpcFederationId;
  recoveryId: RpcRecoveryId;
  peerId: RpcPeerId;
  password: string;
};

export type backupNow = { federationId: RpcFederationId };

export type bridgeStatus = {};

export type calculateMaxGenerateEcash = { federationId: RpcFederationId };

export type cancelEcash = { federationId: RpcFederationId; ecash: string };

export type cancelSocialRecovery = {};

export type checkMnemonic = { mnemonic: Array<string> };

export type communityPreview = { inviteCode: string };

export type completeOnboardingNewSeed = {};

export type completeSocialRecovery = {};

export type decodeInvoice = {
  federationId: RpcFederationId | null;
  invoice: string;
};

export type dumpDb = { federationId: string };

export type evilSpamAddress = { federationId: RpcFederationId };

export type evilSpamInvoices = { federationId: RpcFederationId };

export type federationPreview = { inviteCode: string };

export type fedimintVersion = {};

export type fetchRegisteredDevices = {};

export type generateAddress = {
  federationId: RpcFederationId;
  frontendMetadata: FrontendMetadata;
};

export type generateEcash = {
  federationId: RpcFederationId;
  amount: RpcAmount;
  includeInvite: boolean;
  frontendMetadata: FrontendMetadata;
};

export type generateInvoice = {
  federationId: RpcFederationId;
  amount: RpcAmount;
  description: string;
  expiry: number | null;
  frontendMetadata: FrontendMetadata;
};

export type generateReusedEcashProofs = { federationId: RpcFederationId };

export type getAccruedOutstandingFediFeesPerTXType = {
  federationId: RpcFederationId;
};

export type getAccruedPendingFediFeesPerTXType = {
  federationId: RpcFederationId;
};

export type getFeatureCatalog = {};

export type getGuardianStatus = { federationId: RpcFederationId };

export type getMnemonic = {};

export type getNostrPubkey = {};

export type getNostrSecret = {};

export type getPrevPayInvoiceResult = {
  federationId: RpcFederationId;
  invoice: string;
};

export type getRecurringdLnurl = { federationId: RpcFederationId };

export type getSensitiveLog = {};

export type getTransaction = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
};

export type internalExportBridgeState = { path: string };

export type internalMarkBridgeExport = {};

export type joinCommunity = { inviteCode: string };

export type joinFederation = {
  inviteCode: string;
  recoverFromScratch: boolean;
};

export type leaveCommunity = { inviteCode: string };

export type leaveFederation = { federationId: RpcFederationId };

export type listCommunities = {};

export type listFederations = {};

export type listFederationsPendingRejoinFromScratch = {};

export type listGateways = { federationId: RpcFederationId };

export type listTransactions = {
  federationId: RpcFederationId;
  startTime: number | null;
  limit: number | null;
};

export type locateRecoveryFile = {};

export type matrixApproveMultispendGroupInvitation = {
  roomId: RpcRoomId;
  invitation: RpcEventId;
};

export type matrixCancelMultispendGroupInvitation = { roomId: RpcRoomId };

export type matrixClearComposerDraft = { roomId: RpcRoomId };

export type matrixDeleteMessage = {
  roomId: RpcRoomId;
  eventId: RpcTimelineEventItemId;
  reason: string | null;
};

export type matrixDownloadFile = { path: string; mediaSource: RpcMediaSource };

export type matrixEditMessage = {
  roomId: RpcRoomId;
  eventId: RpcTimelineEventItemId;
  newContent: SendMessageData;
};

export type matrixEndPoll = { roomId: RpcRoomId; pollStartId: string };

export type matrixGetAccountSession = { cached: boolean };

export type matrixGetMediaPreview = { url: string };

export type matrixIgnoreUser = { userId: RpcUserId };

export type matrixInitializeStatus = {
  streamId: RpcStreamId<MatrixInitializeStatus>;
};

export type matrixListIgnoredUsers = {};

export type matrixLoadComposerDraft = { roomId: RpcRoomId };

export type matrixMultispendDeposit = {
  roomId: RpcRoomId;
  amount: RpcFiatAmount;
  description: string;
  frontendMeta: FrontendMetadata;
};

export type matrixMultispendEventData = {
  roomId: RpcRoomId;
  eventId: RpcEventId;
};

export type matrixMultispendListEvents = {
  roomId: RpcRoomId;
  startAfter: number | null;
  limit: number;
};

export type matrixPublicRoomInfo = { roomId: string };

export type matrixRejectMultispendGroupInvitation = {
  roomId: RpcRoomId;
  invitation: RpcEventId;
};

export type matrixRespondToPoll = {
  roomId: RpcRoomId;
  pollStartId: string;
  answerIds: Array<string>;
};

export type matrixRoomBanUser = {
  roomId: RpcRoomId;
  userId: RpcUserId;
  reason: string | null;
};

export type matrixRoomCreate = { request: CreateRoomRequest };

export type matrixRoomCreateOrGetDm = { userId: RpcUserId };

export type matrixRoomGetMembers = { roomId: RpcRoomId };

export type matrixRoomGetNotificationMode = { roomId: RpcRoomId };

export type matrixRoomGetPowerLevels = { roomId: RpcRoomId };

export type matrixRoomInviteUserById = { roomId: RpcRoomId; userId: RpcUserId };

export type matrixRoomJoin = { roomId: RpcRoomId };

export type matrixRoomJoinPublic = { roomId: RpcRoomId };

export type matrixRoomKickUser = {
  roomId: RpcRoomId;
  userId: RpcUserId;
  reason: string | null;
};

export type matrixRoomLeave = { roomId: RpcRoomId };

export type matrixRoomMarkAsUnread = { roomId: RpcRoomId; unread: boolean };

export type matrixRoomPreviewContent = { roomId: RpcRoomId };

export type matrixRoomSendReceipt = { roomId: RpcRoomId; eventId: string };

export type matrixRoomSetName = { roomId: RpcRoomId; name: string };

export type matrixRoomSetNotificationMode = {
  roomId: RpcRoomId;
  mode: RpcRoomNotificationMode;
};

export type matrixRoomSetPowerLevels = {
  roomId: RpcRoomId;
  new: RpcRoomPowerLevelsEventContent;
};

export type matrixRoomSetTopic = { roomId: RpcRoomId; topic: string };

export type matrixRoomSubscribeInfo = {
  streamId: RpcStreamId<RpcSerializedRoomInfo>;
  roomId: RpcRoomId;
};

export type matrixRoomSubscribeTimelineItemsPaginateBackwardsStatus = {
  streamId: RpcStreamId<RpcBackPaginationStatus>;
  roomId: RpcRoomId;
};

export type matrixRoomTimelineItemsPaginateBackwards = {
  roomId: RpcRoomId;
  eventNum: number;
};

export type matrixRoomUnbanUser = {
  roomId: RpcRoomId;
  userId: RpcUserId;
  reason: string | null;
};

export type matrixSaveComposerDraft = {
  roomId: RpcRoomId;
  draft: RpcComposerDraft;
};

export type matrixSendAttachment = {
  roomId: RpcRoomId;
  filename: string;
  filePath: string;
  params: RpcMediaUploadParams;
};

export type matrixSendMessage = { roomId: RpcRoomId; data: SendMessageData };

export type matrixSendMultispendGroupInvitation = {
  roomId: RpcRoomId;
  signers: Array<RpcUserId>;
  threshold: number;
  federationId: RpcFederationId;
  federationName: string;
};

export type matrixSendMultispendWithdrawalApprove = {
  roomId: RpcRoomId;
  withdrawRequestId: RpcEventId;
};

export type matrixSendMultispendWithdrawalReject = {
  roomId: RpcRoomId;
  withdrawRequestId: RpcEventId;
};

export type matrixSendMultispendWithdrawalRequest = {
  roomId: RpcRoomId;
  amount: RpcFiatAmount;
  description: string;
};

export type matrixSendReply = {
  roomId: RpcRoomId;
  replyToEventId: RpcEventId;
  data: SendMessageData;
};

export type matrixSetAvatarUrl = { avatarUrl: string };

export type matrixSetDisplayName = { displayName: string };

export type matrixSetPusher = { pusher: RpcPusher };

export type matrixStartPoll = {
  roomId: RpcRoomId;
  question: string;
  answers: Array<string>;
  isMultipleChoice: boolean;
  isDisclosed: boolean;
};

export type matrixSubscribeMultispendAccountInfo = {
  roomId: RpcRoomId;
  streamId: RpcStreamId<{ Ok: RpcSPv2SyncResponse } | { Err: NetworkError }>;
};

export type matrixSubscribeMultispendEventData = {
  streamId: RpcStreamId<MsEventData>;
  roomId: RpcRoomId;
  eventId: RpcEventId;
};

export type matrixSubscribeMultispendGroup = {
  streamId: RpcStreamId<RpcMultispendGroupStatus>;
  roomId: RpcRoomId;
};

export type matrixSubscribeRoomList = {
  streamId: RpcVecDiffStreamId<RpcRoomId>;
};

export type matrixSubscribeRoomTimelineItems = {
  streamId: RpcVecDiffStreamId<RpcTimelineItem>;
  roomId: RpcRoomId;
};

export type matrixSubscribeSyncIndicator = {
  streamId: RpcStreamId<RpcSyncIndicator>;
};

export type matrixUnignoreUser = { userId: RpcUserId };

export type matrixUploadMedia = { path: string; mimeType: string };

export type matrixUserDirectorySearch = { searchTerm: string; limit: number };

export type matrixUserProfile = { userId: RpcUserId };

export type nostrDecrypt = { pubkey: string; ciphertext: string };

export type nostrDecrypt04 = { pubkey: string; ciphertext: string };

export type nostrEncrypt = { pubkey: string; plaintext: string };

export type nostrEncrypt04 = { pubkey: string; plaintext: string };

export type nostrRateFederation = {
  federationId: string;
  rating: number;
  includeInviteCode: boolean;
};

export type onAppForeground = {};

export type onboardRegisterAsNewDevice = {};

export type onboardTransferExistingDeviceRegistration = { index: number };

export type payAddress = {
  federationId: RpcFederationId;
  address: string;
  sats: bigint;
  frontendMetadata: FrontendMetadata;
};

export type payInvoice = {
  federationId: RpcFederationId;
  invoice: string;
  frontendMetadata: FrontendMetadata;
};

export type previewPayAddress = {
  federationId: RpcFederationId;
  address: string;
  sats: bigint;
};

export type receiveEcash = {
  federationId: RpcFederationId;
  ecash: string;
  frontendMetadata: FrontendMetadata;
};

export type recheckPeginAddress = {
  federationId: RpcFederationId;
  operationId: RpcOperationId;
};

export type recoveryQr = {};

export type restoreMnemonic = { mnemonic: Array<string> };

export type setLightningModuleFediFeeSchedule = {
  federationId: RpcFederationId;
  sendPpm: bigint;
  receivePpm: bigint;
};

export type setMintModuleFediFeeSchedule = {
  federationId: RpcFederationId;
  sendPpm: bigint;
  receivePpm: bigint;
};

export type setSPv2ModuleFediFeeSchedule = {
  federationId: RpcFederationId;
  sendPpm: bigint;
  receivePpm: bigint;
};

export type setSensitiveLog = { enable: boolean };

export type setStabilityPoolModuleFediFeeSchedule = {
  federationId: RpcFederationId;
  sendPpm: bigint;
  receivePpm: bigint;
};

export type setWalletModuleFediFeeSchedule = {
  federationId: RpcFederationId;
  sendPpm: bigint;
  receivePpm: bigint;
};

export type signLnurlMessage = { message: string; domain: string };

export type signNostrEvent = { eventHash: string };

export type socialRecoveryApprovals = {};

export type socialRecoveryDownloadVerificationDoc = {
  federationId: RpcFederationId;
  recoveryId: RpcRecoveryId;
  peerId: RpcPeerId;
};

export type spv2AccountInfo = { federationId: RpcFederationId };

export type spv2AvailableLiquidity = { federationId: RpcFederationId };

export type spv2AverageFeeRate = {
  federationId: RpcFederationId;
  numCycles: number;
};

export type spv2DepositToSeek = {
  federationId: RpcFederationId;
  amount: RpcAmount;
  frontendMeta: FrontendMetadata;
};

export type spv2NextCycleStartTime = { federationId: RpcFederationId };

export type spv2OurPaymentAddress = { federationId: RpcFederationId };

export type spv2ParsePaymentAddress = { address: string };

export type spv2SubscribeAccountInfo = {
  federationId: RpcFederationId;
  streamId: RpcStreamId<RpcSPv2CachedSyncResponse>;
};

export type spv2Transfer = {
  paymentAddress: string;
  amount: RpcFiatAmount;
  frontendMeta: FrontendMetadata;
};

export type spv2Withdraw = {
  federationId: RpcFederationId;
  fiatAmount: number;
  frontendMeta: FrontendMetadata;
};

export type spv2WithdrawAll = {
  federationId: RpcFederationId;
  frontendMeta: FrontendMetadata;
};

export type stabilityPoolAccountInfo = {
  federationId: RpcFederationId;
  forceUpdate: boolean;
};

export type stabilityPoolAvailableLiquidity = { federationId: RpcFederationId };

export type stabilityPoolAverageFeeRate = {
  federationId: RpcFederationId;
  numCycles: number;
};

export type stabilityPoolCycleStartPrice = { federationId: RpcFederationId };

export type stabilityPoolDepositToSeek = {
  federationId: RpcFederationId;
  amount: RpcAmount;
};

export type stabilityPoolNextCycleStartTime = { federationId: RpcFederationId };

export type stabilityPoolWithdraw = {
  federationId: RpcFederationId;
  unlockedAmount: RpcAmount;
  lockedBps: number;
};

export type streamCancel = { streamId: number };

export type supportsRecurringdLnurl = { federationId: RpcFederationId };

export type supportsSafeOnchainDeposit = { federationId: RpcFederationId };

export type switchGateway = {
  federationId: RpcFederationId;
  gatewayId: RpcPublicKey;
};

export type updateCachedFiatFXInfo = {
  fiatCode: string;
  btcToFiatHundredths: bigint;
};

export type updateTransactionNotes = {
  federationId: RpcFederationId;
  transactionId: string;
  notes: string;
};

export type uploadBackupFile = {
  federationId: RpcFederationId;
  videoFilePath: string;
};

export type validateEcash = { ecash: string };

export type validateRecoveryFile = { path: string };
